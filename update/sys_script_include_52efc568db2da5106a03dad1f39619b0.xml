<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_snc_devtools.GitHubAPI</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Interface to the GitHub API.</description>
        <name>GitHubAPI</name>
        <script><![CDATA[var GitHubAPI = Class.create();
GitHubAPI.prototype = {
	
    initialize: function(vAuthentication)
	{
		this.SetApiUrl('https://api.github.com/');
		this.m_basicauth = { username: '', password: ''};
		this.m_nRequestCount = 0;
    },
	
	SetCredential: function(strCredSysId)
	{
		var provider = new sn_cc.StandardCredentialsProvider();
		if (IsObject(provider) == false)
		{
			LogError('GitHubAPI::SetCredential failed to initialize sn_cc.StandardCredentialsProvider.');
			return;
		}
		var credential = provider.getCredentialByID(strCredSysId);
		
		if (IsObject(credential) == false)
		{
			LogError('GitHubAPI::SetCredential getCredentialByID("'+strCredSysId+'") failed.');
			return;
		}

		this.SetBasicAuth(
			credential.getAttribute("user_name"),
			credential.getAttribute("password"));
	},

	SetBasicAuth: function(strUsername, strPassword)
	{
		this.m_basicauth = {
			username: strUsername,
			password: strPassword
		};
	},
	
	SetApiUrl: function(strApiUrl)
	{
		strApiUrl = GetStringValue(strApiUrl);
		if (strApiUrl.endsWith('/') == false)
		{
			strApiUrl = strApiUrl+'/';
		}
		this.m_strApiUrl = strApiUrl;
	},

	GetApiUrl: function()
	{
		return this.m_strApiUrl;
	},
	
	Error: function(strMessage)
	{
		LogError('GitHubAPI: ERROR: '+strMessage);
	},
	
	GetRequestCount: function()
	{
		return this.m_nRequestCount;
	},	
	
	Request: function(strPath)
	{
		this.m_nRequestCount++;
		
		var strUrl = this.GetApiUrl()+strPath;
		var params = {
			url: strUrl,
			basicauth: this.m_basicauth,
			headers:
				[
					{
						name: 'accept',
						value: 'application/vnd.github+json'
					}
				]
		};
		
		var strResponse = HttpRequest(params);
		var response = ParseJson(strResponse);
		
		var strErrorMessage = GetStringValue(GetValue(response,'message'));
		if (strErrorMessage != '')
		{
			this.Error('GitHub API returned: "'+strErrorMessage+'"');
			return false;
		}
		return response;
	},
	
	GetPublicReposFromOwner: function(strOwner)
	{
		// &visibility=all&type=all&affiliation=owner,collaborator,organization_member
		return this.Request('users/'+strOwner+'/repos?per_page=100&page=1');
	},
	
	GetBranchesFromRepo: function(strOwner, strRepo)
	{
		return this.Request('repos/'+strOwner+'/'+strRepo+'/branches');
	},

	GetFilesFromBranch: function(strOwner, strRepo, strBranch, strPath)
	{
		strBranch = GetStringValue(strBranch);
		strPath = GetStringValue(strPath);
		if (strPath == '/')
		{
			strPath = '';
		}

		var aFiles = [];

		if (strPath == '')
		{
			var response = this.Request('repos/'+strOwner+'/'+strRepo+'/git/trees/'+strBranch+'?recursive=1');
			if (response == false)
			{
				this.Error('GetFilesFromBranch: no files found.');
				return false;
			}
			var aItems = GetArrayValue(GetValue(response,'tree'));
			var aFiles = [];
			for (var nItem = 0; nItem < aItems.length; nItem++)
			{
				var item = aItems[nItem];
				var strType = GetValue(item,'type');
				if (strType == 'blob')
				{
					aFiles.push(GetValue(item,'path'));
				}
			}
		}
		else
		{
			var response = this.Request('repos/'+strOwner+'/'+strRepo+'/contents/'+strPath+'?ref='+strBranch);
			if (response == false)
			{
				this.Error('GetFilesFromBranch: no files found.');
				return false;
			}
			aItems = GetArrayValue(response);
			for (var nItem = 0; nItem < aItems.length; nItem++)
			{
				var item = aItems[nItem];
				var strType = GetValue(item,'type');
				if (strType == 'file')
				{
					aFiles.push(GetValue(item,'path'));
				}
				else if (strType == 'dir')
				{
					var strDirName = GetValue(item,'name');
					var strDirPath = GetValue(item,'path');
					var aFilesInDir = this.GetFilesFromBranch(strOwner, strRepo, strBranch, strDirPath);
					if (IsArray(aFilesInDir))
					{
						aFiles = ArrayAppend(aFiles,aFilesInDir);
					}
				}
			}
		}
		return aFiles;
	},
	
	GetFile: function(strOwner, strRepo, strBranch, strFilePath)
	{
		strBranch = GetStringValue(strBranch);
		strFilePath = GetStringValue(strFilePath);
		var response = this.Request('repos/'+strOwner+'/'+strRepo+'/contents/'+strFilePath+'?ref='+strBranch);
		if (response == false)
		{
			this.Error('GetFile: Request failed.');
			return false;
		}
		
		var strType = GetValue(response,'type');
		if (strType != 'file')
		{
			this.Error('GetFile: The given path is not a file.');
			return false;
		}
		return response;
	},	

	
    type: 'GitHubAPI'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-03-09 21:01:35</sys_created_on>
        <sys_id>52efc568db2da5106a03dad1f39619b0</sys_id>
        <sys_mod_count>62</sys_mod_count>
        <sys_name>GitHubAPI</sys_name>
        <sys_package display_value="DevTools WORK IN PROGRESS" source="x_snc_devtools">d689f6901bd38450a89720a8ec4bcbfd</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="DevTools WORK IN PROGRESS">d689f6901bd38450a89720a8ec4bcbfd</sys_scope>
        <sys_update_name>sys_script_include_52efc568db2da5106a03dad1f39619b0</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-11-07 11:35:00</sys_updated_on>
    </sys_script_include>
</record_update>
