<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_snc_devtools.WhatRuns</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Identifies business rules that run for the given tables in the different CRUD operations.</description>
        <name>WhatRuns</name>
        <script><![CDATA[function WhatRuns(vTables)
{
	
	function MakeWhatRunsObjectFromRecord(grRecord, strPhase)
	{
		if (IsValidRecord(grRecord) == false)
		{
			return false;
		}
		strPhase = GetStringValue(strPhase);
		var whatruns_object = {};
		whatruns_object['phase'] = strPhase;
		
		var strClassName = GetStringValue(grRecord.getRecordClassName());
		whatruns_object['class_name'] = strClassName;
		whatruns_object['sys_id'] = GetStringValue(grRecord.sys_id);

		if (strClassName == 'sys_script') // business rules
		{
			whatruns_object['order'] = GetIntegerValue(grRecord.order);
			whatruns_object['class_display_name'] = 'Business Rule';
			whatruns_object['table'] = GetStringValue(grRecord.collection);
			whatruns_object['name'] = GetStringValue(grRecord.name);	
		}
		if (strClassName == 'sysrule_view') // view rules
		{
			whatruns_object['order'] = GetIntegerValue(grRecord.order);
			whatruns_object['class_display_name'] = 'View Rule';
			whatruns_object['table'] = GetStringValue(grRecord.table);
			whatruns_object['name'] = GetStringValue(grRecord.name) + ' ('+GetStringValue(grRecord.device_type)+')';	
		}		
		if (strClassName == 'sys_hub_flow') // Flows
		{
			whatruns_object['order'] = '';
			whatruns_object['class_display_name'] = 'Flow';
			//whatruns_object['table'] = GetStringValue(grRecord.table);
			whatruns_object['name'] = GetStringValue(grRecord.name);	
		}		
		return whatruns_object;
	}
	
	var aTables = GetArrayValue(vTables);
	
	var whatruns = {};
	
	for (var nTable = 0; nTable < aTables.length; nTable++)
	{
		var strTable = aTables[nTable];
		if (IsValidTable(strTable) == true)
		{
			var whatruns_table = {};
			
			
			var aParentTables = Array();
			var strParentTable = GetParentTable(strTable);
			while (strParentTable != '')
			{
				aParentTables.push(strParentTable);
				strParentTable = GetParentTable(strParentTable);
			}
			

			// INSERT
			var aWhatRuns = Array();
			
				// BEFORE
				var grBR = new GlideRecord('sys_script');
				grBR.addActiveQuery();
				var condition = grBR.addQuery('collection','=',strTable);
				for (var nParentTable = 0; nParentTable < aParentTables.length; nParentTable++)
				{
					condition.addOrCondition('collection','=',aParentTables[nParentTable]);
				}
				grBR.addQuery('action_insert','=','true');
				grBR.addQuery('when','=','before');
				grBR.orderBy('order');
				grBR.query();
				while (grBR.next())
				{
					var whatruns_object = MakeWhatRunsObjectFromRecord(grBR, 'before');
					aWhatRuns.push(whatruns_object); 
				}
			
				// AFTER
				var grBR = new GlideRecord('sys_script');
				grBR.addActiveQuery();
				var condition = grBR.addQuery('collection','=',strTable); // also consider parent tables!
				for (var nParentTable = 0; nParentTable < aParentTables.length; nParentTable++)
				{
					condition.addOrCondition('collection','=',aParentTables[nParentTable]);
				}
				grBR.addQuery('action_insert','=','true');
				grBR.addQuery('when','=','after');
				grBR.orderBy('order');
				grBR.query();
				while (grBR.next())
				{
					var whatruns_object = MakeWhatRunsObjectFromRecord(grBR, 'after');
					aWhatRuns.push(whatruns_object); 
				}	
			
				var grFlowTrigger = new GlideRecord('sys_flow_record_trigger');
				grFlowTrigger.addQuery('table','=',strTable);
				grFlowTrigger.addQuery('on_insert','=','true');
				grFlowTrigger.addQuery('run_flow_in','=','foreground');
				grFlowTrigger.query();
				while (grFlowTrigger.next())
				{
					var grFlow = new GlideRecord('sys_hub_flow');
					grFlow.addQuery('remote_trigger_id',grFlowTrigger.sys_id);
					grFlow.query();
					while (grFlow.next())
					{
						var whatruns_object = MakeWhatRunsObjectFromRecord(grFlow, 'after');
						whatruns_object['table'] = strTable;
						aWhatRuns.push(whatruns_object); 
					}
				}			
			
				// ASYNC
				var grBR = new GlideRecord('sys_script');
				grBR.addActiveQuery();
				var condition = grBR.addQuery('collection','=',strTable); // also consider parent tables!
				for (var nParentTable = 0; nParentTable < aParentTables.length; nParentTable++)
				{
					condition.addOrCondition('collection','=',aParentTables[nParentTable]);
				}
				grBR.addQuery('action_insert','=','true');
				var condition = grBR.addQuery('when','=','async');
				condition.addOrCondition('when','=','async_always')
				grBR.orderBy('order');
				grBR.query();
				while (grBR.next())
				{
					var whatruns_object = MakeWhatRunsObjectFromRecord(grBR, 'async');
					aWhatRuns.push(whatruns_object); 
				}		
			
				var grFlowTrigger = new GlideRecord('sys_flow_record_trigger');
				grFlowTrigger.addQuery('table','=',strTable);
				grFlowTrigger.addQuery('on_insert','=','true');
				grFlowTrigger.addQuery('run_flow_in','=','background');
				grFlowTrigger.query();
				while (grFlowTrigger.next())
				{
					var grFlow = new GlideRecord('sys_hub_flow');
					grFlow.addQuery('remote_trigger_id',grFlowTrigger.sys_id);
					grFlow.query();
					while (grFlow.next())
					{
						var whatruns_object = MakeWhatRunsObjectFromRecord(grFlow, 'async');
						whatruns_object['table'] = strTable;
						aWhatRuns.push(whatruns_object); 
					}
				}
			
				whatruns_table['insert'] = aWhatRuns;

			
			// UPDATE	
			var aWhatRuns = Array();
			
				// BEFORE
				var grBR = new GlideRecord('sys_script');
				grBR.addActiveQuery();
				var condition = grBR.addQuery('collection','=',strTable); // also consider parent tables!
				for (var nParentTable = 0; nParentTable < aParentTables.length; nParentTable++)
				{
					condition.addOrCondition('collection','=',aParentTables[nParentTable]);
				}
				grBR.addQuery('action_update','=','true');
				grBR.addQuery('when','=','before');
				grBR.orderBy('order');
				grBR.query();
				while (grBR.next())
				{
					var whatruns_object = MakeWhatRunsObjectFromRecord(grBR, 'before');
					aWhatRuns.push(whatruns_object); 
				}
			
				// AFTER
				var grBR = new GlideRecord('sys_script');
				grBR.addActiveQuery();
				var condition = grBR.addQuery('collection','=',strTable); // also consider parent tables!
				for (var nParentTable = 0; nParentTable < aParentTables.length; nParentTable++)
				{
					condition.addOrCondition('collection','=',aParentTables[nParentTable]);
				}
				grBR.addQuery('action_update','=','true');
				grBR.addQuery('when','=','after');
				grBR.orderBy('order');
				grBR.query();
				while (grBR.next())
				{
					var whatruns_object = MakeWhatRunsObjectFromRecord(grBR, 'after');
					aWhatRuns.push(whatruns_object); 
				}
				
				var grFlowTrigger = new GlideRecord('sys_flow_record_trigger');
				grFlowTrigger.addQuery('table','=',strTable);
				grFlowTrigger.addQuery('on_update','=','true');
				grFlowTrigger.addQuery('run_flow_in','=','foreground');
				grFlowTrigger.query();
				while (grFlowTrigger.next())
				{
					var grFlow = new GlideRecord('sys_hub_flow');
					grFlow.addQuery('remote_trigger_id',grFlowTrigger.sys_id);
					grFlow.query();
					while (grFlow.next())
					{
						var whatruns_object = MakeWhatRunsObjectFromRecord(grFlow, 'async');
						whatruns_object['table'] = strTable;
						aWhatRuns.push(whatruns_object); 
					}
				}	
			
			
				// ASYNC
				var grBR = new GlideRecord('sys_script');
				grBR.addActiveQuery();
				var condition = grBR.addQuery('collection','=',strTable); // also consider parent tables!
				for (var nParentTable = 0; nParentTable < aParentTables.length; nParentTable++)
				{
					condition.addOrCondition('collection','=',aParentTables[nParentTable]);
				}
				grBR.addQuery('action_update','=','true');
				var condition = grBR.addQuery('when','=','async');
				condition.addOrCondition('when','=','async_always')
				grBR.orderBy('order');
				grBR.query();
				while (grBR.next())
				{
					var whatruns_object = MakeWhatRunsObjectFromRecord(grBR, 'async');
					aWhatRuns.push(whatruns_object); 
				}				
			
				var grFlowTrigger = new GlideRecord('sys_flow_record_trigger');
				grFlowTrigger.addQuery('table','=',strTable);
				grFlowTrigger.addQuery('on_update','=','true');
				grFlowTrigger.addQuery('run_flow_in','=','background');
				grFlowTrigger.query();
				while (grFlowTrigger.next())
				{
					var grFlow = new GlideRecord('sys_hub_flow');
					grFlow.addQuery('remote_trigger_id',grFlowTrigger.sys_id);
					grFlow.query();
					while (grFlow.next())
					{
						var whatruns_object = MakeWhatRunsObjectFromRecord(grFlow, 'async');
						whatruns_object['table'] = strTable;
						aWhatRuns.push(whatruns_object); 
					}
				}
	
			
				whatruns_table['update'] = aWhatRuns;
			
			
			// QUERY
			var aWhatRuns = Array();
			
				// BEFORE
				var grBR = new GlideRecord('sys_script');
				grBR.addActiveQuery();
				var condition = grBR.addQuery('collection','=',strTable); // also consider parent tables!
				for (var nParentTable = 0; nParentTable < aParentTables.length; nParentTable++)
				{
					condition.addOrCondition('collection','=',aParentTables[nParentTable]);
				}
				grBR.addQuery('action_query','=','true');
				grBR.addQuery('when','=','before');
				grBR.orderBy('order');
				grBR.query();
				while (grBR.next())
				{
					var whatruns_object = MakeWhatRunsObjectFromRecord(grBR, 'before');
					aWhatRuns.push(whatruns_object); 
				}
			
				// AFTER // Interesting: a business rule can be configured that way but is not called!
			/*
				var grBR = new GlideRecord('sys_script');
				grBR.addActiveQuery();
				grBR.addQuery('collection','=',strTable); // also consider parent tables!
				for (var nParentTable = 0; nParentTable < aParentTables.length; nParentTable++)
				{
					condition.addOrCondition('collection','=',aParentTables[nParentTable]);
				}
				grBR.addQuery('action_query','=','true');
				grBR.addQuery('when','=','after');
				grBR.orderBy('order');
				grBR.query();
				while (grBR.next())
				{
					var whatruns_object = {};
					whatruns_object['phase'] = 'after';
					whatruns_object['order'] = GetIntegerValue(grBR.order);
					whatruns_object['class_name'] = 'sys_script';
					whatruns_object['sys_id'] = GetStringValue(grBR.sys_id);
					whatruns_object['class_display_name'] = 'Business Rule';
					whatruns_object['table'] = GetStringValue(grBR.collection);
					whatruns_object['name'] = GetStringValue(grBR.name);
					aWhatRuns.push(whatruns_object); 
				}			
			*/
				// ASYNC
				var grBR = new GlideRecord('sys_script');
				grBR.addActiveQuery();
				var condition = grBR.addQuery('collection','=',strTable); // also consider parent tables!
				for (var nParentTable = 0; nParentTable < aParentTables.length; nParentTable++)
				{
					condition.addOrCondition('collection','=',aParentTables[nParentTable]);
				}
				grBR.addQuery('action_query','=','true');
				var condition = grBR.addQuery('when','=','async');
				condition.addOrCondition('when','=','async_always')
				grBR.orderBy('order');
				grBR.query();
				while (grBR.next())
				{
					var whatruns_object = MakeWhatRunsObjectFromRecord(grBR, 'async');
					aWhatRuns.push(whatruns_object); 
				}	
			
				whatruns_table['query'] = aWhatRuns;
			
			// DISPLAY
			var aWhatRuns = Array();
			
				// BEFORE
				var grBR = new GlideRecord('sys_script');
				grBR.addActiveQuery();
				var condition = grBR.addQuery('collection','=',strTable);
				for (var nParentTable = 0; nParentTable < aParentTables.length; nParentTable++)
				{
					condition.addOrCondition('collection','=',aParentTables[nParentTable]);
				}
				grBR.addQuery('when','=','before_display');
				grBR.orderBy('order');
				grBR.query();
				while (grBR.next())
				{
					var whatruns_object = MakeWhatRunsObjectFromRecord(grBR, 'before');
					aWhatRuns.push(whatruns_object); 
				}
			
				// VIEW RULES
				var grVR = new GlideRecord('sysrule_view');
				grVR.orderBy('order');
				grVR.addActiveQuery();
				var condition = grVR.addQuery('table','=',strTable);
				for (var nParentTable = 0; nParentTable < aParentTables.length; nParentTable++)
				{
					condition.addOrCondition('table','=',aParentTables[nParentTable]);
				}
				grVR.query();
				while (grVR.next())
				{
					var whatruns_object = MakeWhatRunsObjectFromRecord(grVR, 'viewrule');
					aWhatRuns.push(whatruns_object); 
				}			
			
				whatruns_table['display'] = aWhatRuns;

	
			// DELETE	
			var aWhatRuns = Array();
			
				// BEFORE
				var grBR = new GlideRecord('sys_script');
				grBR.addActiveQuery();
				var condition = grBR.addQuery('collection','=',strTable); // also consider parent tables!
				for (var nParentTable = 0; nParentTable < aParentTables.length; nParentTable++)
				{
					condition.addOrCondition('collection','=',aParentTables[nParentTable]);
				}
				grBR.addQuery('action_delete','=','true');
				grBR.addQuery('when','=','before');
				grBR.orderBy('order');
				grBR.query();
				while (grBR.next())
				{
					var whatruns_object = MakeWhatRunsObjectFromRecord(grBR, 'before');
					aWhatRuns.push(whatruns_object); 
				}
			
				// AFTER
				var grBR = new GlideRecord('sys_script');
				grBR.addActiveQuery();
				var condition = grBR.addQuery('collection','=',strTable); // also consider parent tables!
				for (var nParentTable = 0; nParentTable < aParentTables.length; nParentTable++)
				{
					condition.addOrCondition('collection','=',aParentTables[nParentTable]);
				}
				grBR.addQuery('action_delete','=','true');
				grBR.addQuery('when','=','after');
				grBR.orderBy('order');
				grBR.query();
				while (grBR.next())
				{
					var whatruns_object = MakeWhatRunsObjectFromRecord(grBR, 'after');
					aWhatRuns.push(whatruns_object); 
				}			
			
				// ASYNC
				var grBR = new GlideRecord('sys_script');
				grBR.addActiveQuery();
				var condition = grBR.addQuery('collection','=',strTable); // also consider parent tables!
				for (var nParentTable = 0; nParentTable < aParentTables.length; nParentTable++)
				{
					condition.addOrCondition('collection','=',aParentTables[nParentTable]);
				}
				grBR.addQuery('action_delete','=','true');
				var condition = grBR.addQuery('when','=','async');
				condition.addOrCondition('when','=','async_always')
				grBR.orderBy('order');
				grBR.query();
				while (grBR.next())
				{
					var whatruns_object = MakeWhatRunsObjectFromRecord(grBR, 'async');
					aWhatRuns.push(whatruns_object); 
				}				
			
			/*
				// FLOWS
				var grFlowTrigger = new GlideRecord('sys_flow_record_trigger');
				grFlowTrigger.addQuery('table','=',strTable);
				grFlowTrigger.addQuery('on_delete','=','true');
				grFlowTrigger.query();
				while (grFlowTrigger.next())
				{
					var grFlow = new GlideRecord('sys_hub_flow');
					grFlow.addQuery('remote_trigger_id',grFlowTrigger.sys_id);
					grFlow.query();
					while (grFlow.next())
					{
						var whatruns_object = MakeWhatRunsObjectFromRecord(grFlow, 'flows');
						whatruns_object['table'] = strTable;
						aWhatRuns.push(whatruns_object); 
					}
				}
				*/
			
				whatruns_table['delete'] = aWhatRuns;
			
			
			whatruns[strTable] = whatruns_table;
		}
	}
	return whatruns;
}]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-03-29 08:27:19</sys_created_on>
        <sys_id>04193959dba64910b652edb3059619c9</sys_id>
        <sys_mod_count>43</sys_mod_count>
        <sys_name>WhatRuns</sys_name>
        <sys_package display_value="DevTools WORK IN PROGRESS" source="x_snc_devtools">d689f6901bd38450a89720a8ec4bcbfd</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="DevTools WORK IN PROGRESS">d689f6901bd38450a89720a8ec4bcbfd</sys_scope>
        <sys_update_name>sys_script_include_04193959dba64910b652edb3059619c9</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-10-22 12:17:37</sys_updated_on>
    </sys_script_include>
</record_update>
