<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_snc_devtools.InstallerAPI</api_name>
        <caller_access>1</caller_access>
        <client_callable>false</client_callable>
        <description>The InstallerAPI class supports scripted installation steps as part of the installation of a scoped app. </description>
        <name>InstallerAPI</name>
        <script><![CDATA[var InstallerAPI = Class.create();
InstallerAPI.prototype = {
    initialize: function(strContext)
	{
		this.m_bError = false;
		this.m_bAborting = false;
		this.m_strContext = '';
		
		strContext = GetStringValue(strContext);
		if (strContext != '')
		{
			this.m_strContext = strContext + ': ';
		}
		this.m_strLog = '\n'+this.m_strContext+'Installation BEGIN\n';
		
		var strLegacyMode = gs.getProperty('glide.record.legacy_cross_scope_access_policy_in_script');
		if (strLegacyMode != 'true')
		{
			this.FatalError('The system property "glide.record.legacy_cross_scope_access_policy_in_script" must be set to true during DevTools installation!');
			return;
		}
		
		if (strContext != '')
		{
			var cache = new TransactionCacheAPI('INSTALLER');
			if (cache.GetItem(strContext) == true)
			{
				this.Log('Installation ran already. Aborting.');
				this.m_bAborting = true;
			}
			cache.SetItem(strContext,true);
		}
		
    },
	
	IsAborting: function()
	{
		return this.m_bAborting;
	},
	
	Log: function(strText)
	{
		this.m_strLog += strText + '\n';
	},
	
	Error: function(strText)
	{
		this.Log('ERROR: '+strText);
		this.m_bError = true;
	},

	FatalError: function(strText)
	{
		this.Log('FATAL ERROR: ABORTING INSTALLATION: '+strText);
		this.m_bError = true;
		this.m_bAborting = true;
	},
	
	
	Finish: function()
	{
		var bResult = true;
		if (this.m_bError == false)
		{
			CacheFlushMenu();
			this.Log(this.m_strContext+'Installation COMPLETED');
		}
		else
		{
			bResult = false;
			this.Log(this.m_strContext+'Installation FAILED')
		}
		x_snc_devtools.Log(this.m_strLog);
		return bResult;
	},
	
	GenericAction: function(vResult,strLogSuccess,strLogError)
	{
		if (this.IsAborting() == true)
		{
			return false;
		}		
		if (vResult == false)
		{
			this.Error(strLogError);
		}
		else
		{
			this.Log(strLogSuccess);
			return vResult;
		}
		return vResult;
	},
	
	
	RecordInsertOrUpdate: function(strTopic,strTable,query,valuesInsert,valuesUpdate)
	{
		if (this.IsAborting() == true)
		{
			return false;
		}		
		
		strTopic = GetStringValue(strTopic);
		
		strTable = GetStringValue(strTable);
		if (IsValidTable(strTable) == false)
		{
			this.Error(strTopic+': Table "'+strTable+'" does not exist.');
			return false;
		}
		if (IsObject(query) == false)
		{
			query = {};
		}
		if (IsObject(valuesInsert) == false)
		{
			valuesInsert = {};
		}
		if (IsObject(valuesUpdate) == false)
		{
			valuesUpdate = {};
		}
		var grRecord = new GlideRecord(strTable);
		GlideRecordAddQuery(grRecord,query);
		GlideRecordQuery(grRecord);
		if (grRecord.getRowCount() > 1)
		{
			this.Error(strTopic+': There is more than one record matching the specified query. No action required.');
			return false;
		}
		if (grRecord.next())
		{
			var aKeys = GetKeys(valuesUpdate);
			if (aKeys.length == 0)
			{
				this.Log(strTopic+': Record exists. No action required.');
				return true;
			}
			else
			{
				GlideRecordSetValues(grRecord,valuesUpdate);
				GlideRecordUpdate(grRecord);
				var strSysId = GetStringValue(grRecord.sys_id);
				if (IsValidSysId(strSysId))
				{
					this.Log(strTopic+': Record has been updated!');
					return true;
				}
				else
				{
					this.Error(strTopic+': Record could not be updated!');
					return false;
				}
			}
		}

		var values = Merge(query,valuesInsert);
		values = Merge(values,valuesUpdate);

		grRecord.initialize();
		grRecord.newRecord();
		GlideRecordSetValues(grRecord,values);
		var strSysId = GlideRecordInsert(grRecord);
		if (IsValidSysId(strSysId) == false)
		{
			this.Error(strTopic+': Record could not be created!');
			return false;
		}
		this.Log(strTopic+': Record has been created.');
		return true;
	},
	
	RecordSetValue: function(strTopic,strTable,strSysId,strField,vValue)
	{
		if (this.IsAborting() == true)
		{
			return false;
		}
		if (strTable == 'sys_dictionary')
		{
			this.Error(strTopic+': RecordSetValue cannot be used on "'+strTable+'". Sys Ids of sys_dictionary entries might differ on instances.');
			return false;
		}
		var vResult = RecordSetValue(strTable,strSysId,strField,vValue);
		if (vResult == false)
		{
			this.Error(strTopic+': Failed to set record '+strTable+':'+strSysId+' value "'+strField+'" to: '+RenderValue(vValue));
			return false;
		}
		this.Log(strTopic+': Set record '+strTable+': '+strSysId+' value "'+strField+'" to: '+RenderValue(vValue));
		return true;
	},
	
	RecordDelete: function(strTopic,strTable,strSysId)
	{
		if (this.IsAborting() == true)
		{
			return false;
		}
		
		var grRecord = GetRecord(strTable,strSysId);
		if (grRecord == false)
		{
			this.Log(strTopic+': Record '+strTable+' / '+strSysId+' does not exist. No action required.');
			return true;
		}
		
		var bResult = RecordDelete(strTable,strSysId);
		if (bResult == true)
		{
			this.Log(strTopic+': Deleted record: '+strTable+' / '+strSysId);
		}
		else
		{
			this.Error(strTopic+': Failed to delete record: '+strTable+' / '+strSysId);
			return false;
		}
		return true;
	},	
	
	DictionarySetValue: function(strTopic,strTable,strElement,strField,vValue)
	{
		if (this.IsAborting() == true)
		{
			return false;
		}
		
		var strItem = GetStringValue(strTable);
		if (GetStringValue(strElement) != '')
		{
			strItem += '.'+strElement;
		}
		
		var grDict = new GlideRecord('sys_dictionary');
		grDict.addQuery('name','=',strTable);
		grDict.addQuery('element','=',strElement);
		grDict.query();
		if (grDict.next() != true)
		{
			this.Error(strTopic+': Could not identify dictionary record for '+strItem+'.');
			return false;			
		}
		
		var vResult = RecordSetValue('sys_dictionary',grDict.sys_id,strField,vValue,true);
		if (vResult == false)
		{
			this.Error(strTopic+': Failed to set dictionary record for '+strItem+': value "'+strField+'" to: '+RenderValue(vValue));
			return false;
		}
		this.Log(strTopic+': Set dictionary record for  '+strItem+': value "'+strField+'" to: '+RenderValue(vValue));
		return true;		
	},
		
	
	CheckTableCrossScopeAccessibility: function(strTable)
	{
		strTable = GetStringValue(strTable);
		if (IsTableCrossScopeAccessible(strTable) == false)
		{
			this.FatalError(strTopic+': Table "'+strTable+'" is not configured to be cross scope accessible.');
			return false;
		}
		this.Log('Table "'+strTable+'" is configured to be cross scope accessible. Proceeding with installation.');
		return true;
	},
	
	SetProperty: function(strProperty, strValue)
	{
		if (this.IsAborting() == true)
		{
			return false;
		}
		
		strProperty = GetStringValue(strProperty);
		strValue = GetStringValue(strValue);
		
		var strOldValue = GetStringValue(gs.getProperty(strProperty));
		if (strOldValue == strValue)
		{
			this.Log('System property '+strProperty+' is already set to "'+strValue+'". No action required.');
			return true;
		}
		
		if (SetProperty(strProperty,strValue,true) == true)
		{
			this.Log('System property '+strProperty+' has been set to "'+strValue+'".');
			return true;
		}
		else
		{
			this.Error('Failed to set system property '+strProperty+' to "'+strValue+'".');
			return false;
		}
	},
	
	SetHomePage: function(strUri)
	{
		this.SetProperty('glide.login.home',strUri);
		this.SetProperty('glide.home.page',strUri);

		var strUrl = GetInstanceURL() + 'nav_to.do?uri='+ strUri;
		
		this.RecordInsertOrUpdate(
			'Set home page',
			'sys_ui_page',
			{
				name: 'home',
				sys_scope: 'global'
			},
			{},
			{
				html:
					'<?xml version="1.0" encoding="utf-8" ?>\n'+
					'<j:jelly trim="false" xmlns:j="jelly:core" xmlns:g="glide" xmlns:j2="null" xmlns:g2="null">\n'+
					'\t<g2:no_escape>$[\n'+
					'\t\tx_snc_devtools.HtmlRenderRedirect(\''+strUrl+'\');\n'+
					'\t]</g2:no_escape>\n'+	
					'</j:jelly>\n'
			});		
		
	},
	
	SetTableAttribute: function(strTable,strAttributeName,strAttributeValue)
	{
		if (this.IsAborting() == true)
		{
			return false;
		}
		
		strTable = GetStringValue(strTable);
		strAttributeName = GetStringValue(strAttributeName);
		strAttributeValue = GetStringValue(strAttributeValue);
		var bResult = TableSetAttribute(strTable,strAttributeName,strAttributeValue);
		if (bResult == true)
		{
			this.Log('Table attribute "'+strAttributeName+'" of table "'+strTable+'" is set to "'+strAttributeValue+'".');
		}
		else
		{
			this.Error('Table attribute "'+strAttributeName+'" of table "'+strTable+'" is NOT set to "'+strAttributeValue+'"!');
		}
		return bResult;

	},
	
	SetTableColumnAttribute: function(strTable,strColumn,strAttributeName,strAttributeValue)
	{
		if (this.IsAborting() == true)
		{
			return false;
		}
		strTable = GetStringValue(strTable);
		strColumn = GetStringValue(strColumn);
		strAttributeName = GetStringValue(strAttributeName);
		strAttributeValue = GetStringValue(strAttributeValue);
		var bResult = TableColumnSetAttribute(strTable,strColumn,strAttributeName,strAttributeValue);
		if (bResult == true)
		{
			this.Log(
				'Table column attribute "'+strAttributeName+'" of column "'+strColumn+'" in table "'+strTable+'" is set to "'+strAttributeValue+'".');
		}
		else
		{
			this.Error(
				'Table column attribute "'+strAttributeName+'" of column "'+strColumn+'" in table "'+strTable+'" is NOT set to "'+strAttributeValue+'"!');
		}
		return bResult;
		
	},

	DeleteView: function(strViewName)
	{
		if (this.IsAborting() == true)
		{
			return false;
		}
		
		strViewName = GetStringValue(strViewName);
		
		var grView = new GlideRecord('sys_ui_view');
		grView.addQuery('name','=',GetStringValue(strViewName));
		grView.query();
		if (grView.getRowCount() == 0)
		{
			this.Log('View '+strViewName+' does not exist. No action required.');
			return true;
		}
		while (grView.next())
		{
			var bResult = RecordDelete('sys_ui_view',grView.sys_id);
			if (bResult == true)
			{
				this.Log('Deleted view: '+strViewName);
			}
			else
			{
				this.Error('Failed to delete view: '+strViewName);
				return false;
			}
		}
		return true;
	},	
	
	DeleteUISection: function(strView,strTable,strScope)
	{
		if (this.IsAborting() == true)
		{
			return false;
		}
		
		strView = GetStringValue(strView);
		strTable = GetStringValue(strTable);
		strScope = GetStringValue(strScope);
		
		var grView = new GlideRecord('sys_ui_view');
		grView.addQuery('title','=',strView);
		grView.query();
		if (grView.getRowCount() != 1)
		{
			var grView = new GlideRecord('sys_ui_view');
			grView.addQuery('name','=',strView);
			grView.query();
			if (grView.getRowCount() != 1)
			{
				this.Log('View "'+strView+'" does not exist. No action required.');	
				return true;
			}
		}
		
		grView.next();
		
		var grSection = new GlideRecord('sys_ui_section');
		grSection.addQuery('name','=',strTable);
		grSection.addQuery('view','=',grView.sys_id);
		if (strScope != '')
		{
			grSection.addQuery('sys_scope','=',strScope);
		}
		grSection.query();
		if (grSection.getRowCount() == 0)
		{
			this.Log('View "'+strView+'" UI Section for table "'+strTable+'" does not exist. No action required.');
			return true;
		}
		while (grSection.next())
		{
			var bResult = RecordDelete('sys_ui_section',grSection.sys_id);
			if (bResult == true)
			{
				this.Log('Deleted UI Section in View "'+strView+'" for table "'+strTable+'".');
			}
			else
			{
				this.Error('Failed to delete UI Section in View "'+strView+'" for table "'+strTable+'".');
				return false;
			}
		}
		return true;
	},		
	
		
	InstallGlobalSystemProperty: function(strName, strType, strDescription)
	{
		if (this.IsAborting() == true)
		{
			return false;
		}

		var grSP = new GlideRecord('sys_properties');
		grSP.addQuery('name','=',GetStringValue(strName));
		grSP.query();
		if (grSP.next())
		{
			this.Log('Global system property '+strName+' already existst. No action required.');
			return grSP.getValue('sys_id');
		}

		var grSP = new GlideRecord('sys_properties');
		grSP.initialize();
		GlideRecordSetValue(grSP,'name',GetStringValue(strName));
		GlideRecordSetValue(grSP,'type',GetStringValue(strType));
		GlideRecordSetValue(grSP,'description',GetStringValue(strDescription));
		GlideRecordSetValue(grSP,'sys_scope','global');
		var strSysID = GlideRecordInsert(grSP);
		if (IsValidSysId(strSysID) == false)
		{
			this.Error('Failed to install global system property '+strName+'.');
			return false;
		}
		this.Log('Installed global system property '+strName+'.');
		return strSysID;
	},

	
	InstallSystemPropertyCategoryMapping: function(strSystemPropertyCategory, strSystemProperty, nOrder)
	{
		if (this.IsAborting() == true)
		{
			return false;
		}
	
		var grSPC = new GlideRecord('sys_properties_category');
		grSPC.addQuery('name','=',GetStringValue(strSystemPropertyCategory));
		grSPC.query();
		if (grSPC.next() == false)
		{
			this.Error('Failed to install system property category mapping. Category '+strSystemPropertyCategory+' does not exist.');
			return false;
		}
		var strSystemPropertyCategorySysId = grSPC.getValue('sys_id');

		var grSP = new GlideRecord('sys_properties');
		grSP.addQuery('name','=',GetStringValue(strSystemProperty));
		grSP.query();
		if (grSP.next() == false)
		{
			this.Error('Failed to install system property category mapping. System property '+strSystemProperty+' does not exist.');
			return false;
		}
		var strSystemPropertySysId = grSP.getValue('sys_id');


		var grSPCM2 = new GlideRecord('sys_properties_category_m2m');
		grSPCM2.addQuery('property','=',strSystemPropertySysId);
		grSPCM2.addQuery('category','=',strSystemPropertyCategorySysId);
		grSPCM2.query();
		if (grSPCM2.next())
		{
			this.Log('System property category mapping for property '+strSystemProperty+' to category '+strSystemPropertyCategory+' already exists. No action required.');
			return grSPCM2.getValue('sys_id');
		}	

		var grSPCM2 = new GlideRecord('sys_properties_category_m2m');
		grSPCM2.initialize();
		grSPCM2.sys_scope = grSPC.sys_scope;
		grSPCM2.category = strSystemPropertyCategorySysId;
		grSPCM2.property = strSystemPropertySysId;
		grSPCM2.order = nOrder;
		//grSPCM2.sys_scope = 'global';
		var strSysID = GetStringValue(GlideRecordInsert(grSPCM2));
		if (IsValidSysId(strSysID) == false)
		{
			this.Error('Failed to create system property category mapping for property '+strSystemProperty+' to category '+strSystemPropertyCategory+'.');
			return false;
		}
		this.Log('System property category mapping for property '+strSystemProperty+' to category '+strSystemPropertyCategory+' has been created.');
		return strSysID;
	},	
	
	ActivateBusinessRule: function(strSysId,bActive)
	{
		return this.ActivateRecord(strSysId,bActive,'sys_script','Business Rule','active','name');
	},
	
	ActivateClientScript: function(strSysId,bActive)
	{
		return this.ActivateRecord(strSysId,bActive,'sys_script_client','Client Script','active','name','type');
	},	
		
	ActivateUiAction: function(strSysId,bActive)
	{
		return this.ActivateRecord(strSysId,bActive,'sys_ui_action','UI Action','active','name','table');
	},		

	ActivateUiPolicy: function(strSysId,bActive)
	{
		return this.ActivateRecord(strSysId,bActive,'sys_ui_policy','UI Policy','active','short_description');
	},		
	
	ActivateServicePortal: function(strSysId,bActive)
	{
		return this.ActivateRecord(strSysId,bActive,'sp_portal','Service Portal','x_snc_devtools_active','title');
	},
	
	ActivateModule: function(strSysId,bActive)
	{
		return this.ActivateRecord(strSysId,bActive,'sys_app_module','Navigation Module','active','title');
	},	
	
	ActivateAppMenu: function(strSysId,bActive)
	{
		return this.ActivateRecord(strSysId,bActive,'sys_app_application','Application Menu','active','title');
	},		
	
	ActivateViewRule: function(strSysId,bActive)
	{
		return this.ActivateRecord(strSysId,bActive,'sysrule_view','View Rule','active','name');
	},			
	
	ActivateACL: function(strSysId,bActive)
	{
		return this.ActivateRecord(strSysId,bActive,'sys_security_acl','Access Control','active','name','operation');
	},			
	
	ActivateNotification: function(strSysId,bActive)
	{
		return this.ActivateRecord(strSysId,bActive,'sysevent_email_action','Notification','active','name');
	},		
	
	ShowFieldClass: function(strName,bVisible)
	{
		if (this.IsAborting() == true)
		{
			return false;
		}
		strName = GetStringValue(strName);
		bVisible = GetBoolValue(bVisible);		
		
		var grSGO = new GlideRecord('sys_glide_object');
		grSGO.addQuery('name','=',strName);
		grSGO.query();
		if (grSGO.next() == false)
		{
			this.Log('Field Class "'+strName+'" does not exist. Doing nothing.');
			return false;
		}
		
		if (grSGO.visible == bVisible)
		{
			this.Log('Field Class "'+grSGO.name+'" is already set '+((bVisible)?('visible'):('ininvisible'))+'. No action required.');
			return GetStringValue(grSGO.sys_id);
		}
		grSGO.visible = bVisible;
		var vResult = GlideRecordUpdate(grSGO);
		if (vResult == false)
		{
			this.Error('Failed to set Field Class "'+grSGO.name+'" '+((bVisible)?('visible'):('invisible'))+'!');
			return false;
		}
		this.Log('Field Class "'+grSGO.name+'" is set '+((bVisible)?('visible'):('invisible'))+'.');
		return GetStringValue(grSGO.sys_id);		
	},		
	
	ActivateRecord: function(strSysId,bActive,strTable,strRecordClassName,strActiveField,strNameField,strAdditionalField)
	{
		if (this.IsAborting() == true)
		{
			return false;
		}
		
		bActive = GetBoolValue(bActive);	
		strNameField = GetStringValue(strNameField);
		strAdditionalField = GetStringValue(strAdditionalField);
		
		var grRecord = GetRecord(strTable,strSysId);
		if (IsValidRecord(grRecord) == false)
		{
			this.Log(strRecordClassName+' with sys_id "'+strSysId+'" does not exist. No action required.');
			return false;
		}
		
		var strName = '"'+grRecord.getValue(strNameField)+'"';
		if (strAdditionalField != '')
		{
			strName += ' ('+grRecord.getValue(strAdditionalField)+')';
		}
		
		if (grRecord.getValue(strActiveField) == bActive)
		{
			this.Log(strRecordClassName+' '+strName+' is already set '+((bActive)?('active'):('inactive'))+'. No action required.');
			return strSysId;
		}
		grRecord.setValue(strActiveField,bActive);
		var vResult = GlideRecordUpdate(grRecord,true);
		if (vResult == false)
		{
			this.Error('Failed to set '+strRecordClassName+' '+strName+' '+((bActive)?('active'):('inactive'))+'!');
			return false;
		}
		this.Log(strRecordClassName+' '+strName+' is set '+((bActive)?('active'):('inactive'))+'.');
		return strSysId;		
	},
	
	InsertFieldToFormSection: function(strUiSectionSysId, strField, nPosition)
	{
		if (this.IsAborting() == true)
		{
			return false;
		}
		strField = GetStringValue(strField);
		nPosition = GetIntegerValue(nPosition);
		
		var grUiSection = GetRecord('sys_ui_section',strUiSectionSysId);
		if (IsValidRecord(grUiSection) == false)
		{
			this.Log('UI Section with sys_id "'+strUiSectionSysId+'" does not exist. Cannot add field "'+strField+'".');
			return false;
		}
		
		var strTable = GetStringValue(grUiSection.getDisplayValue('name'));
		
		var grUiElement = new GlideRecord('sys_ui_element');
		grUiElement.addQuery('sys_ui_section','=',strUiSectionSysId);
		grUiElement.addQuery('element','=',strField);
		grUiElement.query();
		if (grUiElement.getRowCount() > 0)
		{
			this.Log('UI Section on table "'+strTable+'" with sys_id "'+strUiSectionSysId+'" already contains field "'+strField+'". No action required.');
			return false;
		}

		var grUiElements = new GlideRecord('sys_ui_element');
		grUiElements.addQuery('sys_ui_section','=',strUiSectionSysId);
		grUiElements.addQuery('position','>=',nPosition);
		grUiElements.query();
		while (grUiElements.next())
		{
			grUiElements.position = grUiElements.position + 1;
			GlideRecordUpdate(grUiElements);
		}

		this.RecordInsertOrUpdate(
			'Add the "'+strField+'" field to a section of "'+strTable+'"',
			'sys_ui_element',
			{
				element: strField,
				sys_ui_section: strUiSectionSysId
			},
			{
				element: strField,
				sys_ui_section: strUiSectionSysId,
				position: nPosition
			},
			{});

		
	},
		
	
    type: 'InstallerAPI'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-08-27 10:49:10</sys_created_on>
        <sys_id>704694a81b1a74505331b8449b4bcb69</sys_id>
        <sys_mod_count>105</sys_mod_count>
        <sys_name>InstallerAPI</sys_name>
        <sys_package display_value="DevTools WORK IN PROGRESS" source="x_snc_devtools">d689f6901bd38450a89720a8ec4bcbfd</sys_package>
        <sys_policy>protected</sys_policy>
        <sys_scope display_value="DevTools WORK IN PROGRESS">d689f6901bd38450a89720a8ec4bcbfd</sys_scope>
        <sys_update_name>sys_script_include_704694a81b1a74505331b8449b4bcb69</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-11-09 07:18:09</sys_updated_on>
    </sys_script_include>
</record_update>
